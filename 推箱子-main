#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <conio.h>
#define X 12
#define Y 12
#define POP 12
#define WALL 35
#define BOX 1
#define TARGET 43
#define MAPNUM 6
#define ARM 40
#include "return.c"//回档文件
#include "map.c"//地图文件

//地图初始化打印
void Map_printf(char*);
void Map_clear(char*);
//判定
int Determine(char*,int);

int main()
{
    char map_xy[Y][X];
    char* p_map=&map_xy[0][0];
    int map_num=1;
    int mod_choose;

    printf("=====欢迎来到“推箱子”小游戏=====\n");
    Sleep(500);
    printf("\n本游戏由“刷课加Q组”荣誉制作！\n");
    Sleep(500);
    printf("游戏介绍：\n\t%c :人物;\n\t%c :箱子;\n\t%c :墙壁;\n\t%c :目的地。\n\n//*  W,A,S,D或8,4,5,6-控制移动，L重新开始，R返回上一步  *\\\\\n\n",POP,BOX,WALL,TARGET);
    Sleep(500);
    printf("从头开始：1\n选择关卡：2\n");
    printf("您的选择是：");
    fflush(stdin);
    do{
        scanf("%d",&mod_choose);
        fflush(stdin);
    }while(mod_choose!=1 && mod_choose!=2);//模式选择

    if(mod_choose==1){
        map_num=1;
        printf("\n\n\n");
    }
    else if(mod_choose==2){
        printf("\n请选择关卡(1-6):");
        do{
            scanf("%d",&map_num);
            fflush(stdin);
        }while(map_num<1 || map_num>MAPNUM);
        printf("\n\n\n");
    }                                       //关卡选择

    do{
        Map_clear(p_map);
        switch(map_num){
            case 1: Map_1(p_map);break;
            case 2: Map_2(p_map);break;
            case 3: Map_3(p_map);break;
            case 4: Map_4(p_map);break;
            case 5: Map_5(p_map);break;
            case 6: Map_6(p_map);break;
            /*case 7:*/
            default: printf("没有此关卡...从第一关来吧！！\n");Map_1(p_map);break;
        }
        printf("\t==第 %d 关==\n",map_num);
        Map_printf(p_map);
        return_num = 0;
        map_return_remember = 0;
        save_map(p_map);
        if(Determine(p_map,map_num)==0){
            printf("\n\n\t过关！！\n\n\n");
            return_num=0;
            map_num++;
            Sleep(1000);
        }
        else {
            printf("重新开始！！\n");
            return_num = 0;
            save_map(p_map);
            Sleep(1000);
        }
    }while(map_num<=MAPNUM);
    printf("\n====恭喜通关！！====\n\n\n\n");
    return 0;
}

void Map_clear(char* p_map)
{
    int i,j;
    for(j=0;j<Y;j++){
        for(i=0;i<X;i++){
            *(p_map+i+X*j)=' ';
        }
    }
}

void Map_printf(char* p_map)
{
    int i,j;
    printf("\t============================\n");
    for(j=0;j<Y;j++){
        printf("\t||");
        for(i=0;i<X;i++){
            printf("%c",*(p_map+i+X*j));
            printf(" ");
        }
        printf("||\n");
    }
    printf("\t============================\n");
}

int Determine(char* p_map,int map_num)
{
    char ch;
    int exit_num=0,i,j,k;

    do{
        fflush(stdin);
        ch=getch();
        fflush(stdin);

        for(j=0,k=0;j<Y;j++){
            for(i=0;i<X;i++){
                if(*(p_map+i+X*j)==POP){
                    k=1;
                    break;
                }
            }
            if(k==1)break;
        }

        if((ch=='w' || ch=='8') && j>0){
            if(*(p_map+i+X*j-X)==WALL || (*(p_map+i+X*j-X)==BOX && *(p_map+i+X*j-2*X)==WALL) || (*(p_map+i+X*j-X)==BOX && *(p_map+i+X*j-2*X)==BOX)){
                continue;
            }
            if(*(p_map+i+X*j-X)==BOX && *(p_map+i+X*j-2*X)!=WALL){
                *(p_map+i+X*j-2*X)=BOX;
                *(p_map+i+X*j-X)=' ';
            }
            j--;
            *(p_map+i+X*j)=POP;
            *(p_map+i+X*j+X)=' ';
            return_num++;
            if(map_return_remember==return_num-1) map_return_remember++;
            save_map(p_map);
        }
        else if((ch=='s' || ch=='5') && j<Y-1){
            if(*(p_map+i+X*j+X)==WALL || (*(p_map+i+X*j+X)==BOX && *(p_map+i+X*j+2*X)==WALL) || (*(p_map+i+X*j+X)==BOX && *(p_map+i+X*j+2*X)==BOX)){
                continue;
            }
            if(*(p_map+i+X*j+X)==BOX && *(p_map+i+X*j+2*X)!=WALL){
                *(p_map+i+X*j+2*X)=BOX;
                *(p_map+i+X*j+X)=' ';
            }
            j++;
            *(p_map+i+X*j)=POP;
            *(p_map+i+X*j-X)=' ';
            return_num++;
            if(map_return_remember==return_num-1)map_return_remember++;
            save_map(p_map);
        }
        else if((ch=='a' || ch=='4') && i>0){
            if(*(p_map+i+X*j-1)==WALL || (*(p_map+i+X*j-1)==BOX && *(p_map+i+X*j-2)==WALL) || (*(p_map+i+X*j-1)==BOX && *(p_map+i+X*j-2)==BOX)){
                continue;
            }
            if(*(p_map+i+X*j-1)==BOX && *(p_map+i+X*j-2)!=WALL){
                *(p_map+i+X*j-2)=BOX;
                *(p_map+i+X*j-1)=' ';
            }
            i--;
            *(p_map+i+X*j)=POP;
            *(p_map+i+X*j+1)=' ';
            return_num++;
            if(map_return_remember==return_num-1)map_return_remember++;
            save_map(p_map);
        }
        else if((ch=='d' || ch=='6') && i<(X-1)){
            if(*(p_map+i+X*j+1)==WALL || (*(p_map+i+X*j+1)==BOX && *(p_map+i+X*j+2)==WALL) || (*(p_map+i+X*j+1)==BOX && *(p_map+i+X*j+2)==BOX)){
                continue;
            }
            if(*(p_map+i+X*j+1)==BOX && *(p_map+i+X*j+2)!=WALL){
                *(p_map+i+X*j+2)=BOX;
                *(p_map+i+X*j+1)=' ';
            }
            i++;
            *(p_map+i+X*j)=POP;
            *(p_map+i+X*j-1)=' ';
            return_num++;
            if(map_return_remember==return_num-1)map_return_remember++;
            save_map(p_map);
        }
        else if(ch=='l'){
            exit_num=1;
        }
        else if(ch=='r'){
            return_num--;
            if(return_num%ARM==map_return_remember%ARM || return_num==-1){
                return_num++;
                printf("====已达回档上限！！====\n");
                continue;
            }
            return_map(p_map);
        }
        else continue;
        Map_printf(p_map);
        if(Map_Determine(p_map,map_num)==1){
            exit_num=0;
            break;
        }

    }while(exit_num==0 );

    return exit_num;
}

